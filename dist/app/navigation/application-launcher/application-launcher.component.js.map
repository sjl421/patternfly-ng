{"version":3,"sources":["../../../../build/src/app/navigation/application-launcher/application-launcher.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EAEL,iBAAiB,EAClB,MAAM,eAAA,CAAgB;AAIvB;;;;;;;;;;;;;;;GAeG;AAEH;IA0BE;;OAEG;IACH;QAbA;;WAEG;QACF,eAAU,GAAY,KAAK,CAAC;QAE7B;;WAEG;QACF,cAAS,GAAY,IAAI,CAAC;IAKZ,CAAC;IAEhB;;OAEG;IACH,+CAAQ,GAAR;IACA,CAAC;IACI,uCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,QAAQ,EAAE,2BAA2B;oBACrC,QAAQ,EAAE,o0CAAgwC;iBAC3wC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,2CAAc,GAA2C;QAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAChC,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC9B,CAAC;IACF,mCAAC;CArDD,AAqDC,IAAA;SArDY,4BAA4B","file":"application-launcher.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  OnInit,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { ApplicationLauncherItem } from './application-launcher-item';\n\n/**\n * Application launcher component\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { ApplicationLauncherModule } from 'patternfly-ng/navigation';\n * // Or\n * import { ApplicationLauncherModule } from 'patternfly-ng';\n *\n * &#64;NgModule({\n *   imports: [ApplicationLauncherModule,...]\n * })\n * export class AppModule(){}\n * </pre></code>\n */\n\nexport class ApplicationLauncherComponent  implements OnInit {\n  /**\n   * Disable the application launcher button, default: false\n   */\n   disabled: boolean;\n\n  /**\n   * The navigation items used to build the menu\n   */\n   items: ApplicationLauncherItem[];\n\n  /**\n   *  Use a custom label for the launcher, default: Application Launcher\n   */\n   label: string;\n\n  /**\n   * Display items as a list instead of a grid, default: false\n   */\n   showAsList: boolean = false;\n\n  /**\n   * Flag to show icons on the launcher, default: true\n   */\n   showIcons: boolean = true;\n\n  /**\n   * The default constructor\n   */\n  constructor() {}\n\n  /**\n   * Initialize variable\n   */\n  ngOnInit(): void {\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-application-launcher',\n  template: `<div><div class=\"applauncher-pf dropdown dropdown-kebab-pf\" dropdown [ngClass]=\"{'applauncher-pf-block-list': !showAsList}\"><a class=\"dropdown-toggle drawer-pf-trigger-icon\" href=\"javascript:void(0)\" dropdownToggle *ngIf=\"!disabled\"><i class=\"fa fa-th applauncher-pf-icon\" aria-hidden=\"true\"></i> <span class=\"applauncher-pf-title\">{{label || 'Application Launcher'}} <span class=\"caret\" aria-hidden=\"true\"></span> </span></a><a class=\"dropdown-toggle drawer-pf-trigger-icon disabled\" href=\"javascript:void(0)\" onclick=\"return false;\" *ngIf=\"disabled\"><i class=\"fa fa-th applauncher-pf-icon\" aria-hidden=\"true\"></i> <span class=\"applauncher-pf-title\">{{label || 'Application Launcher'}} <span class=\"caret\" aria-hidden=\"true\"></span></span></a><ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\" *dropdownMenu><li class=\"applauncher-pf-item\" *ngFor=\"let item of items\"><a class=\"applauncher-pf-link\" href=\"{{item.url}}\" target=\"{{item.target || '_blank'}}\" title=\"{{badge.tooltip}}\" role=\"menuitem\" *ngFor=\"let badge of item.badges\"><i class=\"applauncher-pf-link-icon pficon {{item.iconStyleClass}}\" aria-hidden=\"true\" [ngClass]=\"{hidden: !showIcons}\" *ngIf=\"item.iconStyleClass\"></i> <span class=\"applauncher-pf-link-title\">{{item.title}}</span></a></li></ul></div></div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'items': [{ type: Input },],\n'label': [{ type: Input },],\n'showAsList': [{ type: Input },],\n'showIcons': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}