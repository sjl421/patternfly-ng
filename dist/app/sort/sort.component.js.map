{"version":3,"sources":["../../../build/src/app/sort/sort.component.ts"],"names":[],"mappings":"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","file":"sort.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { cloneDeep, defaults, isEqual } from 'lodash';\n\nimport { SortConfig } from './sort-config';\nimport { SortField } from './sort-field';\nimport { SortEvent } from './sort-event';\n\n/**\n * Sort component\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { SortModule } from 'patternfly-ng/sort';\n * // Or\n * import { SortModule } from 'patternfly-ng';\n *\n * &#64;NgModule({\n *   imports: [SortModule,...]\n * })\n * export class AppModule(){}\n * </pre></code>\n *\n * Optional:\n * <code><pre>\n * import { SortConfig, SortEvent, SortField } from 'patternfly-ng/sort';\n * </pre></code>\n */\n\nexport class SortComponent implements DoCheck, OnInit {\n  /**\n   * The sort config containing component properties\n   */\n   config: SortConfig;\n\n  /**\n   * The event emitted when the sort has changed\n   */\n   onChange = new EventEmitter();\n\n  private currentField: SortField;\n  private defaultConfig: SortConfig = {\n    isAscending: true,\n    visible: true\n  } as SortConfig;\n  private prevConfig: SortConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   * Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n\n    if (this.config && this.config.fields && this.config.fields.length > 0) {\n      if (this.currentField === undefined) {\n        this.currentField = this.config.fields[0];\n      }\n      if (this.config.isAscending === undefined) {\n        this.config.isAscending = true;\n      }\n    }\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  // Actions\n\n  private getIconStyleClass(): string {\n    let iconStyleClass: string;\n    if (this.currentField && this.currentField.sortType\n        && this.currentField.sortType === 'numeric') {\n      if (this.config.isAscending) {\n        iconStyleClass = 'fa fa-sort-numeric-asc';\n      } else {\n        iconStyleClass = 'fa fa-sort-numeric-desc';\n      }\n    } else {\n      if (this.config.isAscending) {\n        iconStyleClass = 'fa fa-sort-alpha-asc';\n      } else {\n        iconStyleClass = 'fa fa-sort-alpha-desc';\n      }\n    }\n    return iconStyleClass;\n  }\n\n  private onChangeDirection(): void {\n    this.config.isAscending = !this.config.isAscending;\n    this.onChange.emit({\n      field: this.currentField,\n      isAscending: this.config.isAscending\n    } as SortEvent);\n  }\n\n  private selectField(field: SortField): void {\n    this.currentField = field;\n    this.onChange.emit({\n      field: this.currentField,\n      isAscending: this.config.isAscending\n    } as SortEvent);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-sort',\n  template: `<div class=\"sort-pf\" *ngIf=\"config?.visible !== false\"><div class=\"btn-group dropdown\" dropdown><button type=\"button\" class=\"btn btn-default dropdown-toggle\" dropdownToggle [disabled]=\"config.disabled === true\">{{currentField?.title}} <span aria-hidden=\"true\" class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\" *dropdownMenu><li role=\"menuitem\" *ngFor=\"let item of config?.fields\" [ngClass]=\"{'selected': item === currentField}\"><a href=\"javascript:void(0);\" class=\"sortfield sort-field dropdown-item\" tabindex=\"-1\" (click)=\"selectField(item)\">{{item?.title}}</a></li></ul></div><button class=\"btn btn-link\" type=\"button\" aria-label=\"Sort Direction\" [disabled]=\"config.disabled === true\" (click)=\"onChangeDirection()\"><span class=\"sort-direction\" [ngClass]=\"getIconStyleClass()\"></span></button></div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'config': [{ type: Input },],\n'onChange': [{ type: Output, args: ['onChange', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}