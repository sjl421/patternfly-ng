{"version":3,"sources":["../../../../build/src/app/notification/toast-notification/toast-notification.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAET,YAAY,EACZ,KAAK,EAEL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAA,CAAgB;AAMvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AAEH;IAqDE;;OAEG;IACH;QApBA;;WAEG;QACF,mBAAc,GAAG,IAAI,YAAY,EAAE,CAAC;QAErC;;WAEG;QACF,kBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QAEpC;;WAEG;QACF,oBAAe,GAAG,IAAI,YAAY,EAAE,CAAC;QAE9B,qBAAgB,GAAY,KAAK,CAAC;IAM1C,CAAC;IAED,iBAAiB;IAEjB;;OAEG;IACH,6CAAQ,GAAR;IACA,CAAC;IAED;;OAEG;IACH,8CAAS,GAAT;QACE,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;eAC5C,CAAC,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;IACtG,CAAC;IASD,sBAAI,uDAAe;QAPnB,YAAY;QAEZ;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;;;OAAA;IAED,UAAU;IAEV,gDAAW,GAAX,UAAY,MAAkB;QAC5B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,SAAS,EAAE,IAAI;SACK,CAAC,CAAC;IAC1B,CAAC;IAED,gDAAW,GAAX,UAAY,MAAkB;QAC5B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,SAAS,EAAE,KAAK;SACI,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU;IAEF,iDAAY,GAApB,UAAqB,MAAc;QACjC,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;gBACvB,MAAM,EAAE,MAAM;gBACd,YAAY,EAAE,IAAI,CAAC,YAAY;aACX,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAEO,gDAAW,GAAnB,UAAoB,MAAkB;QACpC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,YAAY,EAAuB,CAAC,CAAC;IACpF,CAAC;IACI,qCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,QAAQ,EAAE,yBAAyB;oBACnC,QAAQ,EAAE,qmFAAm/E;iBAC9/E,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,yCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,yCAAc,GAA2C;QAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAClC,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACnC,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;QACjE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAE;QAC/D,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAG,EAAE,EAAE;KAClE,CAAC;IACF,iCAAC;CA1ID,AA0IC,IAAA;SA1IY,0BAA0B","file":"toast-notification.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Action } from '../../action/action';\nimport { Notification } from '../notification';\nimport { NotificationEvent } from '../notification-event';\n\n/**\n * Toast notifications are used to notify users of a system occurrence. Toast notifications should be transient and stay\n * on the screen for 8 seconds, so that they do not block the information behind them for too long, but allows the user\n * to read the message. The ToastNotification component allows status, header, message, primary action and menu actions\n * for the notification. The notification can also allow the user to close the notification.\n *\n * Note: Using the kebab menu (more actions) with the close button is not currently supported. If both are specified the\n * close button will not be shown. Add a close menu item if you want to have both capabilities.\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { ToastNotificationModule } from 'patternfly-ng/notification';\n * // Or\n * import { ToastNotificationModule } from 'patternfly-ng';\n *\n * // NGX Bootstrap\n * import { BsDropdownConfig, BsDropdownModule } from 'ngx-bootstrap/dropdown';\n *\n * &#64;NgModule({\n *   imports: [ToastNotificationModule, BsDropdownModule.forRoot(),...],\n *   providers: [BsDropdownConfig]\n * })\n * export class AppModule(){}\n * </pre></code>\n *\n * Optional:\n * <code><pre>\n * import { Notification, NotificationEvent, NotificationType } from 'patternfly-ng/notification';\n * </pre></code>\n */\n\nexport class ToastNotificationComponent implements DoCheck, OnInit {\n  /**\n   * The notification header\n   */\n   header: string;\n\n  /**\n   * The notification message\n   */\n   message: string;\n\n  /**\n   * The notification kebab actions\n   */\n   moreActions: Action[];\n\n  /**\n   * An object containing notifications properties\n   */\n   notification: Notification;\n\n  /**\n   * The primary action\n   */\n   primaryAction: Action;\n\n  /**\n   * Set to true to show close button\n   */\n   showClose: boolean;\n\n  /**\n   * The notification type (e.g., NotificationType.SUCCESS, NotificationType.INFO, etc.)\n   */\n   type: string;\n\n  /**\n   * The event emitted when an action has been selected\n   */\n   onActionSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the close button has been selected\n   */\n   onCloseSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the mouse hovers over and leaves a notification\n   */\n   onViewingChange = new EventEmitter();\n\n  private _showCloseButton: boolean = false;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    this._showCloseButton = (this.showClose === true)\n      && (this.moreActions === undefined || this.moreActions === null || this.moreActions.length === 0);\n  }\n\n  // Accessors\n\n  /**\n   * Get the flag indicating that the close button should be shown\n   *\n   * @returns {FilterField} The flag indicating that the close button should be shown\n   */\n  get showCloseButton(): boolean {\n    return this._showCloseButton;\n  }\n\n  // Actions\n\n  handleEnter($event: MouseEvent): void {\n    this.onViewingChange.emit({\n      notification: this.notification,\n      isViewing: true\n    } as NotificationEvent);\n  }\n\n  handleLeave($event: MouseEvent): void {\n    this.onViewingChange.emit({\n      notification: this.notification,\n      isViewing: false\n    } as NotificationEvent);\n  }\n\n  // Private\n\n  private handleAction(action: Action): void {\n    if (action && action.disabled !== true) {\n      this.onActionSelect.emit({\n        action: action,\n        notification: this.notification\n      } as NotificationEvent);\n    }\n  }\n\n  private handleClose($event: MouseEvent): void {\n    this.onCloseSelect.emit({ notification: this.notification } as NotificationEvent);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-toast-notification',\n  template: `<div class=\"toast-pf alert alert-{{type}}\" [ngClass]=\"{'alert-dismissable': showCloseButton}\" (mouseenter)=\"handleEnter($event)\" (mouseleave)=\"handleLeave($event)\"><div *ngIf=\"moreActions?.length > 0\" class=\"pull-right dropdown-kebab-pf\" dropdown><button class=\"btn btn-link dropdown-toggle\" type=\"button\" id=\"dropdownKebabRight\" dropdownToggle><span class=\"fa fa-ellipsis-v\"></span></button><ul class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownKebabRight\" *dropdownMenu><li *ngFor=\"let action of moreActions\" class=\"{{action.styleClass}}\" [attr.role]=\"action.separator === true ? 'separator' : 'menuitem'\" [ngClass]=\"{'divider': action.separator === true, 'disabled': action.disabled === true, 'hidden': action.visible === false}\"><a *ngIf=\"action.disabled !== true && action.separator !== true\" class=\"dropdown-item secondary-action\" href=\"javascript:void(0)\" title=\"{{action.tooltip}}\" (click)=\"handleAction(action)\">{{action.title}}</a> <a *ngIf=\"action.disabled === true && action.separator !== true\" class=\"dropdown-item secondary-action\" href=\"javascript:void(0)\" title=\"{{action.tooltip}}\" onclick=\"return false;\">{{action.title}}</a></li></ul></div><button *ngIf=\"showCloseButton\" type=\"button\" class=\"close\" aria-hidden=\"true\" (click)=\"handleClose($event)\"><span class=\"pficon pficon-close\"></span></button><div *ngIf=\"primaryAction\" class=\"pull-right toast-pf-action {{primaryAction.styleClass}}\" [ngClass]=\"{'padding-right-15': showCloseButton == true, 'hidden': primaryAction?.visible === false}\"><div *ngIf=\"primaryAction.template; then showButtonTemplate else showButton\"></div><ng-template #showButtonTemplate let-action=\"action\" [ngTemplateOutlet]=\"primaryAction.template\" [ngTemplateOutletContext]=\"{ action: action }\"></ng-template><ng-template #showButton><a *ngIf=\"primaryAction.disabled !== true\" href=\"javascript:void(0)\" title=\"{{primaryAction?.tooltip}}\" (click)=\"handleAction(primaryAction)\">{{primaryAction?.title}}</a> <a *ngIf=\"primaryAction.disabled === true\" href=\"javascript:void(0)\" title=\"{{primaryAction?.tooltip}}\" onclick=\"return false;\">{{primaryAction?.title}}</a></ng-template></div><span class=\"pficon pficon-ok\" *ngIf=\"type === 'success'\"></span> <span class=\"pficon pficon-info\" *ngIf=\"type === 'info'\"></span> <span class=\"pficon pficon-error-circle-o\" *ngIf=\"type === 'danger'\"></span> <span class=\"pficon pficon-warning-triangle-o\" *ngIf=\"type === 'warning'\"></span> <span *ngIf=\"header\"><strong>{{header}}</strong> {{message}} </span><span *ngIf=\"!header\">{{message}}</span></div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'header': [{ type: Input },],\n'message': [{ type: Input },],\n'moreActions': [{ type: Input },],\n'notification': [{ type: Input },],\n'primaryAction': [{ type: Input },],\n'showClose': [{ type: Input },],\n'type': [{ type: Input },],\n'onActionSelect': [{ type: Output, args: ['onActionSelect', ] },],\n'onCloseSelect': [{ type: Output, args: ['onCloseSelect', ] },],\n'onViewingChange': [{ type: Output, args: ['onViewingChange', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}