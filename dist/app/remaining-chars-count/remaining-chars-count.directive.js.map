{"version":3,"sources":["../../../build/src/app/remaining-chars-count/remaining-chars-count.directive.ts"],"names":[],"mappings":"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","file":"remaining-chars-count.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  Renderer2\n} from '@angular/core';\n\n/**\n * Remaining Characters directive for showing a characters remaining count and triggering warning and error\n * behavior when passing specified thresholds. When the <code>charsRemainingWarning</code> threshold is passed,\n * the <code>chars-warn-remaining-pf</code> css class is applied to the <code>charsRemainingElement</code>, which by\n * default, turns the remaining count number <font color='red'>red</font>. By default, characters may be entered into\n * the text field after the <code>charsMaxLimit</code> limit has been reached, the remaining count number will become a\n * negative value. Setting the <code>blockInputAtMaxLimit</code> to <em>true</em>, will block additional input into the\n * text field after the max has been reached; additionally a right-click 'paste' will only paste characters until the\n * maximum character limit is reached.\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { RemainingCharsCountModule } from 'patternfly-ng/remainingCharsCount';\n * // Or\n * import { RemainingCharsCountModule } from 'patternfly-ng';\n *\n * &#64;NgModule({\n *   imports: [RemainingCharsCountModule,...]\n * })\n * export class AppModule(){}\n * </pre></code>\n */\n\nexport class RemainingCharsCountDirective implements OnInit {\n  /**\n   * If true, no more characters can be entered into the text field\n   */\n   blockInputAtMaxLimit: boolean;\n\n  /**\n   * Number representing the maximum number of characters allowed. Default is 100\n   */\n   charsMaxLimit: number = 100;\n\n  /**\n   * The ElementRef used to display the characters remaining count\n   */\n   charsRemainingElement: any;\n\n  /**\n   * Number of remaining characters to warn upon. Default is 5\n   */\n   charsRemainingWarning: number = 5;\n\n  /**\n   * The event emitted when a remaining characters is over max limit\n   */\n   onOverCharsMaxLimit = new EventEmitter();\n\n  /**\n   * The event emitted when a remaining characters is under max limit\n   */\n   onUnderCharsMaxLimit = new EventEmitter();\n\n  private remainingChars: number = 0;\n\n  /**\n   * Default constructor\n   *\n   * @param el The element reference for this component\n   * @param renderer The renderer service\n   */\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.remainingChars = this.charsMaxLimit;\n    this.checkRemainingChars();\n  }\n\n  // Actions\n\n  /**\n   * Handle key events\n   *\n   * Note: Using the keyup event Vs keypress to include backspace/delete\n   *\n   * @param $event A KeyboardEvent object\n   */\n   private handleKeypress($event: KeyboardEvent): void {\n    // Once the charsMaxLimit has been met or exceeded, prevent all keypresses from working\n    if (this.blockInputAtMaxLimit && this.el.nativeElement.value.length >= this.charsMaxLimit) {\n      // Except backspace\n      if ($event.keyCode !== 8) {\n        $event.preventDefault();\n      }\n    }\n    this.checkRemainingChars();\n  }\n\n  /**\n   * Helper to check remaining characters\n   */\n  private checkRemainingChars(): void {\n    this.setRemainingChars();\n    this.setRemainingCharsWarning();\n    this.emitRemainingCharsEvent();\n  }\n\n  /**\n   * Emit remaining characters event\n   */\n  private emitRemainingCharsEvent(): void {\n    if (this.remainingChars <= 0) {\n      this.onOverCharsMaxLimit.emit(this.remainingChars);\n    } else {\n      this.onUnderCharsMaxLimit.emit(this.remainingChars);\n    }\n  }\n\n  /**\n   * Set remaining characters\n   */\n  private setRemainingChars(): void {\n    let charsLength = this.el.nativeElement.value.length;\n\n    // Trim if blockInputAtMaxLimit and over limit\n    if (this.blockInputAtMaxLimit && charsLength > this.charsMaxLimit) {\n      this.el.nativeElement.value = this.el.nativeElement.value.substring(0, this.charsMaxLimit);\n      charsLength = this.el.nativeElement.value.length;\n    }\n    this.remainingChars = this.charsMaxLimit - charsLength;\n  }\n\n  /**\n   * Set remaining characters warning\n   */\n  private setRemainingCharsWarning(): void {\n    if (this.charsRemainingElement !== undefined) {\n      this.charsRemainingElement.innerText = this.remainingChars;\n\n      if (this.remainingChars <= this.charsRemainingWarning) {\n        this.renderer.addClass(this.charsRemainingElement, 'chars-warn-remaining-pf');\n      } else {\n        this.renderer.removeClass(this.charsRemainingElement, 'chars-warn-remaining-pf');\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pfng-remaining-chars-count]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'blockInputAtMaxLimit': [{ type: Input },],\n'charsMaxLimit': [{ type: Input },],\n'charsRemainingElement': [{ type: Input },],\n'charsRemainingWarning': [{ type: Input },],\n'onOverCharsMaxLimit': [{ type: Output, args: ['onOverCharsMaxLimit', ] },],\n'onUnderCharsMaxLimit': [{ type: Output, args: ['onUnderCharsMaxLimit', ] },],\n'handleKeypress': [{ type: HostListener, args: ['keyup', ['$event'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}