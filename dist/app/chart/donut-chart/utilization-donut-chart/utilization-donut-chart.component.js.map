{"version":3,"sources":["../../../../../build/src/app/chart/donut-chart/utilization-donut-chart/utilization-donut-chart.component.ts"],"names":[],"mappings":"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","file":"utilization-donut-chart.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { ChartDefaults } from '../../chart-defaults';\nimport { DonutChartBaseComponent } from '../donut-chart-base.component';\nimport { UtilizationDonutChartConfig } from './utilization-donut-chart-config';\nimport { WindowReference } from '../../../utilities/window.reference';\n\n/**\n * Donut Utilization chart component.\n *\n * Note: In order to use charts, please include the following JavaScript file from PatternFly.\n * <code><pre>\n * require('patternfly/dist/js/patternfly-settings');\n * </pre></code>\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { UtilizationDonutChartModule } from 'patternfly-ng/chart';\n * // Or\n * import { UtilizationDonutChartModule } from 'patternfly-ng';\n *\n * &#64;NgModule({\n *   imports: [UtilizationDonutChartModule,...]\n * })\n * export class AppModule(){}\n * </pre></code>\n *\n * Optional:\n * <code><pre>\n * import { UtilizationDonutChartConfig } from 'patternfly-ng/chart';\n * </pre></code>\n */\n\nexport class UtilizationDonutChartComponent extends DonutChartBaseComponent {\n  /**\n   * Configuration object containing details about how to render the utilization chart\n   */\n   config: UtilizationDonutChartConfig;\n\n  /**\n   * Event emitted when the Used amount passes a user defined threshold\n   * @type {EventEmitter}\n   */\n   thresholdChanged: EventEmitter<any> = new EventEmitter();\n\n  private threshold: string;\n\n  /**\n   * Default constructor\n   */\n  constructor(protected chartDefaults: ChartDefaults, protected windowRef: WindowReference) {\n    super(chartDefaults, windowRef);\n  }\n\n  /**\n   * Returns an object containing center label properties\n   * @returns {any}\n   */\n  getCenterLabelText(): any {\n    // Public for testing\n\n    this.updateMetrics();\n    const units: string = this.config.units;\n    const available: number = this.config.available;\n    const total: number = this.config.total;\n    const percent: number = this.config.percent;\n    const used: number = this.config.used;\n    const labelFormat: string = this.config.centerLabelFormat;\n\n    let centerLabelText: any = {};\n\n    if (this.config.centerLabelFn) {\n      let labelText: any = this.config.centerLabelFn();\n      centerLabelText.title = labelText.title;\n      centerLabelText.subTitle = labelText.subTitle;\n    } else {\n      switch (labelFormat) {\n        case 'none':\n          centerLabelText.title = '';\n          centerLabelText.subTitle = '';\n          break;\n        case 'available':\n          centerLabelText.title = available;\n          centerLabelText.subTitle = units + ' Available';\n          break;\n        case 'percent':\n          centerLabelText.title = percent + '%';\n          centerLabelText.subTitle = 'of ' + total + ' ' + units;\n          break;\n        default:\n          centerLabelText.title = used;\n          centerLabelText.subTitle = units + ' Used';\n      }\n    }\n\n    return centerLabelText;\n  }\n\n  /**\n   * get C3 chart data from config properties\n   */\n  protected getChartData(): any {\n    this.updateMetrics();\n    return {\n      columns: [\n        ['Used', this.config.used],\n        ['Available', this.config.available]\n      ],\n      colors: this.getUtilizationColors(),\n      groups: [\n        ['used', 'available']\n      ]\n    };\n  }\n\n  private updateMetrics(): any {\n    this.config.available = this.config.total - this.config.used;\n    this.config.percent = Math.round(this.config.used / this.config.total * 100.0);\n  }\n\n  private getUtilizationColors(): any {\n    return {\n      Used: this.getUtilizationUsedColor(this.config.percent, this.config.thresholds),\n      Available: this.chartDefaults.getDefaultDonutColors().pattern[1]  // grey\n    };\n  }\n\n  private getUtilizationUsedColor(used: number, thresholds: any) {\n    let threshold: string = 'none';\n\n    let thresholdColors = this.chartDefaults.getDefaultRelationshipDonutColors().pattern;\n    let color = thresholdColors[0];      // default blue\n    let errorColor = thresholdColors[1]; // red\n    let warnColor = thresholdColors[2];  // orange\n    let okColor = thresholdColors[3];    // green\n\n    if (thresholds) {\n      threshold = 'ok';\n      color = okColor;\n      if (used >= thresholds.error) {\n        threshold = 'error';\n        color = errorColor;\n      } else if (used >= thresholds.warning) {\n        threshold = 'warning';\n        color = warnColor;\n      }\n    }\n\n    if (!this.threshold || this.threshold !== threshold) {\n      this.threshold = threshold;\n      this.thresholdChanged.emit(this.threshold);\n    }\n\n    return color;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-utilization-donut-chart',\n  template: `<div class=\"pct-donut-chart-pf\"><span [ngClass]=\"{'pct-donut-chart-pf-left': config.outerLabelAlignment === 'left',\n                   'pct-donut-chart-pf-right': config.outerLabelAlignment === 'right'}\"><span class=\"pct-donut-chart-pf-chart\"><div #chartElement id=\"{{config.chartId}}\"></div></span><span [ngClass]=\"{'text-right': config.outerLabelAlignment === 'left',\n                      'text-left': config.outerLabelAlignment === 'right',\n                      'text-center': config.outerLabelAlignment !== 'left' && config.outerLabelAlignment !== 'right'}\"><ng-content></ng-content></span></span></div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChartDefaults, },\n{type: WindowReference, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'config': [{ type: Input },],\n'thresholdChanged': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}