{"version":3,"sources":["../../../../build/src/app/copy/block-copy/block-copy.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,iBAAiB,EAClB,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,QAAA,EAAS,MAAO,QAAA,CAAS;AAElC,OAAO,EAAE,QAAA,EAAS,MAAO,cAAA,CAAe;AACxC,OAAO,EAAE,WAAA,EAAY,MAAO,8BAAA,CAA+B;AAE3D;;;;;;;;;;;;;;;;;;;;GAoBG;AAEH;IAAwC,sCAAQ;IA0B9C;;OAEG;IACH,4BAAsB,WAAwB;QAA9C,YACE,kBAAM,WAAW,CAAC,SACnB;QAFqB,iBAAW,GAAX,WAAW,CAAa;QAlB9C;;WAEG;QACF,cAAQ,GAAY,KAAK,CAAC;QAO3B;;WAEG;QACO,cAAQ,GAAW,QAAQ,CAAC,iBAAiB,CAAC,CAAC;;IAOzD,CAAC;IAKD,sBAAI,wCAAQ;QAHZ;;WAEG;aACH;YACE,MAAM,CAAI,IAAI,CAAC,QAAQ,YAAS,CAAC;QACnC,CAAC;;;OAAA;IAED;;OAEG;IACH,wCAAW,GAAX;QACE,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACjC,CAAC;IACI,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,+rCAAuoC;iBAClpC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,iCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,WAAW,GAAG;KACpB,EAF6F,CAE7F,CAAC;IACK,iCAAc,GAA2C;QAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;QAC9C,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,aAAa,EAAG,EAAE,EAAE;QAC1D,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAE;QACpD,uBAAuB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,uBAAuB,EAAG,EAAE,EAAE;KAC7E,CAAC;IACF,yBAAC;CA/DD,AA+DC,CA/DuC,QAAQ,GA+D/C;SA/DY,kBAAkB","file":"block-copy.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { uniqueId } from 'lodash';\n\nimport { CopyBase } from '../copy-base';\nimport { CopyService } from '../copy-service/copy.service';\n\n/**\n * Block Copy component\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { BlockCopyModule } from 'patternfly-ng/copy';\n * // Or\n * import { BlockCopyModule } from 'patternfly-ng';\n *\n * &#64;NgModule({\n *   imports: [BlockCopyModule,...]\n * })\n * export class AppModule(){}\n * </pre></code>\n *\n * Optional:\n * <code><pre>\n * import { CopyEvent } from 'patternfly-ng/copy';\n * </pre></code>\n */\n\nexport class BlockCopyComponent extends CopyBase {\n  /**\n   * Label output above the block copy component\n   */\n   label: string;\n\n  /**\n   * Copy button label\n   */\n   buttonLabel: string;\n\n  /**\n   * Flag indicating the expanded state for the expansion panel\n   */\n   expanded: boolean = false;\n\n  /**\n   * Aria label for the expansion toggle\n   */\n   expandToggleAriaLabel: string;\n\n  /**\n   * Generates a unique prefix for element IDs\n   */\n  protected uniqueID: string = uniqueId('pfng-block-copy');\n\n  /**\n   * The default constructor\n   */\n  constructor(protected copyService: CopyService) {\n    super(copyService);\n  }\n\n  /**\n   * Generates a unique ID for the button\n   */\n  get buttonId(): string {\n    return `${this.uniqueID}-button`;\n  }\n\n  /**\n   * Toggle expansion panel open and close\n   */\n  togglePanel(): void {\n    this.expanded = !this.expanded;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-block-copy',\n  template: `<div class=\"pfng-block-copy\"><label *ngIf=\"label\" class=\"pfng-block-copy-label\" [attr.for]=\"buttonId\">{{label}}</label><div class=\"pfng-block-copy-inner-container\"><div class=\"pfng-block-copy-preview\" [ngClass]=\"{'pf-is-open': expanded}\"><button [attr.aria-label]=\"expandToggleAriaLabel\" [attr.aria-expanded]=\"expanded\" class=\"pfng-block-copy-preview-btn\" (click)=\"togglePanel()\"><i aria-hidden=\"true\" class=\"fa pfng-block-copy-preview-icon\" [ngClass]=\"{'fa-angle-down': expanded, 'fa-angle-right': !expanded}\"></i></button><div class=\"pfng-block-copy-preview-txt-cont\" placement=\"{{tooltipPlacement ? tooltipPlacement : null}}\" tooltip=\"{{tooltip ? tooltip : null}}\"><span class=\"pfng-block-copy-preview-txt\">{{value}}</span></div><button [attr.id]=\"buttonId\" class=\"btn btn-lg btn-default pfng-block-copy-btn\" [attr.aria-label]=\"buttonAriaLabel\" (click)=\"copy()\"><span><ng-container *ngIf=\"!recentlyCopied\">{{buttonLabel}}</ng-container><ng-container *ngIf=\"recentlyCopied\"><i class=\"fa fa-check\" aria-hidden=\"true\"></i> Copied</ng-container></span></button></div><div class=\"pfng-block-copy-body\" *ngIf=\"expanded\"><span>{{value}}</span></div></div></div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CopyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input, args: ['label', ] },],\n'buttonLabel': [{ type: Input, args: ['buttonLabel', ] },],\n'expanded': [{ type: Input, args: ['expanded', ] },],\n'expandToggleAriaLabel': [{ type: Input, args: ['expandToggleAriaLabel', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}