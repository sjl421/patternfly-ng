{"version":3,"sources":["../../../../build/src/app/notification/inline-notification/inline-notification.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EACL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAA,CAAgB;AAIvB;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AAEH;IAgCE;;OAEG;IACH;QAdA;;WAEG;QACF,WAAM,GAAY,KAAK,CAAC;QAEzB;;WAEG;QACF,iBAAY,GAAG,IAAI,YAAY,EAAW,CAAC;IAO5C,CAAC;IAED;;OAEG;IACI,wDAAkB,GAAzB;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAEI,sCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,QAAQ,EAAE,0BAA0B;oBACpC,QAAQ,EAAE,0nBAAwlB;iBACnmB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,0CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,0CAAc,GAA2C;QAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;KAC5D,CAAC;IACF,kCAAC;CAhED,AAgEC,IAAA;SAhEY,2BAA2B","file":"inline-notification.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { NotificationType } from '../notification-type';\n\n/**\n * Inline notifications can be used to provide notifications to user that can persist on the page\n * they are also optionally dismissable by the user\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { InlineNotificationModule } from 'patternfly-ng/notification';\n * // Or\n * import { InlineNotificationModule } from 'patternfly-ng';\n *\n * // NGX Bootstrap\n * import { BsDropdownConfig, BsDropdownModule } from 'ngx-bootstrap/dropdown';\n *\n * &#64;NgModule({\n *   imports: [InlineNotificationModule, BsDropdownModule.forRoot(),...],\n *   providers: [BsDropdownConfig]\n * })\n * export class AppModule(){}\n * </pre></code>\n *\n * Optional:\n * <code><pre>\n * import { NotificationType } from 'patternfly-ng/notification';\n * </pre></code>\n */\n\nexport class InlineNotificationComponent {\n  /**\n   * The notification type (e.g., NotificationType.SUCCESS, NotificationType.INFO, etc.)\n   */\n   type: NotificationType;\n\n  /**\n   * The message to display within the notification\n   */\n   message: string;\n\n  /**\n   * The notification header\n   */\n   header: string;\n\n  /**\n   * Boolean to indicate whether or not notification can be dismissed\n   */\n   dismissable: boolean;\n\n  /**\n   * Indicates whether or not the notification is currently hidden\n   */\n   hidden: boolean = false;\n\n  /**\n   * The event emitted when the mouse hovers over and leaves a notification\n   */\n   hiddenChange = new EventEmitter<boolean>();\n\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Function called from the view when the notification is removed\n   */\n  public notificationRemove(): void {\n    this.hidden = true;\n    this.hiddenChange.emit(this.hidden);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-inline-notification',\n  template: `<div class=\"alert alert-{{type}}\" [ngClass]=\"{'alert-dismissable': dismissable === true}\" *ngIf=\"!hidden\"><button *ngIf=\"dismissable\" (click)=\"notificationRemove()\" type=\"button\" class=\"close\" aria-hidden=\"true\"><span class=\"pficon pficon-close\"></span></button> <span class=\"pficon pficon-ok\" *ngIf=\"type === 'success'\"></span> <span class=\"pficon pficon-info\" *ngIf=\"type === 'info'\"></span> <span class=\"pficon pficon-error-circle-o\" *ngIf=\"type === 'danger'\"></span> <span class=\"pficon pficon-warning-triangle-o\" *ngIf=\"type === 'warning'\"></span> <strong>{{header}}</strong> {{message}}</div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'type': [{ type: Input },],\n'message': [{ type: Input },],\n'header': [{ type: Input },],\n'dismissable': [{ type: Input },],\n'hidden': [{ type: Input },],\n'hiddenChange': [{ type: Output, args: ['hiddenChange', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}