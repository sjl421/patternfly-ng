{"version":3,"sources":["../../../../build/src/app/notification/toast-notification-list/toast-notification-list.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAA,CAAgB;AAKvB;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAEH;IA0BE;;OAEG;IACH;QAlBA;;WAEG;QACF,mBAAc,GAAG,IAAI,YAAY,EAAE,CAAC;QAErC;;WAEG;QACF,kBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QAEpC;;WAEG;QACF,oBAAe,GAAG,IAAI,YAAY,EAAE,CAAC;IAMtC,CAAC;IAED,iBAAiB;IAEjB;;OAEG;IACH,iDAAQ,GAAR;IACA,CAAC;IAED,UAAU;IAEV;;OAEG;IACK,qDAAY,GAApB,UAAqB,MAAyB;QAC5C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEO,oDAAW,GAAnB,UAAoB,MAAyB;QAC3C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEO,4DAAmB,GAA3B,UAA4B,MAAyB;QACnD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACI,yCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,QAAQ,EAAE,8BAA8B;oBACxC,QAAQ,EAAE,0mBAAglB;iBAC3lB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,6CAAc,GAA2C;QAChE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACnC,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/B,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;QACjE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAE;QAC/D,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAG,EAAE,EAAE;KAClE,CAAC;IACF,qCAAC;CAzED,AAyEC,IAAA;SAzEY,8BAA8B","file":"toast-notification-list.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Notification } from '../notification';\nimport { NotificationEvent } from '../notification-event';\n\n/**\n * Component to display a list of toast notifications\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { ToastNotificationListModule } from 'patternfly-ng/notification';\n * // Or\n * import { ToastNotificationListModule } from 'patternfly-ng';\n *\n * // NGX Bootstrap\n * import { BsDropdownConfig, BsDropdownModule } from 'ngx-bootstrap/dropdown';\n *\n * &#64;NgModule({\n *   imports: [ToastNotificationListModule, BsDropdownModule.forRoot(),...],\n *   providers: [BsDropdownConfig]\n * })\n * export class AppModule(){}\n * </pre></code>\n *\n * Optional:\n * <code><pre>\n * import { Notification, NotificationEvent, NotificationType } from 'patternfly-ng/notification';\n * </pre></code>\n */\n\nexport class ToastNotificationListComponent implements OnInit {\n  /**\n   * A list of notifiactions to display\n   */\n   notifications: Notification[];\n\n  /**\n   * Set to true to show close button\n   */\n   showClose: boolean;\n\n  /**\n   * The event emitted when an action has been selected\n   */\n   onActionSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the close button has been selected\n   */\n   onCloseSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the mouse hovers over and leaves a notification\n   */\n   onViewingChange = new EventEmitter();\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n  }\n\n  // Actions\n\n  /**\n   * Check if the component config has changed\n   */\n  private handleAction($event: NotificationEvent): void {\n    this.onActionSelect.emit($event);\n  }\n\n  private handleClose($event: NotificationEvent): void {\n    this.onCloseSelect.emit($event);\n  }\n\n  private handleViewingChange($event: NotificationEvent) {\n    this.onViewingChange.emit($event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-toast-notification-list',\n  template: `<div class=\"toast-notifications-list-pf\" *ngIf=\"notifications?.length > 0\"><div *ngFor=\"let notification of notifications\"><pfng-toast-notification [header]=\"notification.header\" [message]=\"notification.message\" [notification]=\"notification\" [moreActions]=\"notification.moreActions\" [primaryAction]=\"notification.primaryAction\" [showClose]=\"showClose === true || notification.isPersistent === true\" [type]=\"notification.type\" (onActionSelect)=\"handleAction($event)\" (onCloseSelect)=\"handleClose($event)\" (onViewingChange)=\"handleViewingChange($event)\"></pfng-toast-notification></div></div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'notifications': [{ type: Input },],\n'showClose': [{ type: Input },],\n'onActionSelect': [{ type: Output, args: ['onActionSelect', ] },],\n'onCloseSelect': [{ type: Output, args: ['onCloseSelect', ] },],\n'onViewingChange': [{ type: Output, args: ['onViewingChange', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}